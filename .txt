MAIN_CONTRACT_ADDRESS=0xb239fBf9AF787C7e8783c76A73cAd2fc42b5118f
FETCH_TESTING_CONTRACT_ADDRESS=

DUMMY ADDRESS:
1. CANDIDATES
- ""
- ""

2. FOUNDATIONS
- ""
- ""

    <header className="sticky inset-0 z-50 bg-transparent backdrop-blur-lg">
                <nav className="mx-auto flex justify-between max-w-6xl transition-all duration-200 ease-in-out py-4 border-b border-slate-400 items-center">
                    <div className="relative flex items-center w-64">
                        <ul className="hidden items-center justify-center md:flex">
                            {/* <Link href={"/under-development"}> */}
                            <li className="font-dm text-sm font-medium text-blue-500 hover:bg-blue-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                <p>About</p>
                            </li>
                            {/* </Link>
                            <Link href={"/donate"}> */}
                            <li className="font-dm text-sm font-medium text-blue-500 hover:bg-blue-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                <p>Donate</p>
                            </li>
                            {/* </Link>
                            <Link href={"/under-development"}> */}
                            <li className="font-dm text-sm font-medium text-blue-500 hover:bg-blue-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                <p>Activity</p>
                            </li>
                            {/* </Link>
                            <Link href={"/vote"}> */}
                            <li className="font-dm text-sm font-medium text-blue-500 hover:bg-blue-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                <p>Vote</p>
                            </li>
                            {/* </Link> */}
                            {isConnected &&
                            address &&
                            checkDeveloperAddress(address?.toString()) ===
                                true ? (
                                // <Link href={"/dev"}>
                                <li className="font-dm text-sm font-medium text-red-500 hover:bg-red-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                    <p>Dev</p>
                                </li>
                            ) : (
                                // </Link>
                                <></>
                            )}
                            {isConnected &&
                            address &&
                            checkFoundationAddress(address?.toString()) ===
                                true ? (
                                // <Link href={"/withdrawal"}>
                                <li className="font-dm text-sm font-medium text-red-500 hover:bg-red-500 rounded-lg px-2 py-1 hover:text-white ease-out transition-all duration-200">
                                    <p>Withdrawal</p>
                                </li>
                            ) : (
                                // </Link>
                                <></>
                            )}
                        </ul>
                    </div>
                    <div className="flex items-center justify-center">
                        {/* <Link href={"/"}> */}
                        <h1 className="font-bold text-4xl text-blue-500">
                            KINDLINK
                        </h1>
                        {/* </Link> */}
                    </div>
                    <div className="items-center justify-end gap-6">
                        {/* <Link href={"/under-development"}>
                            <button className="rounded-md bg-gradient-to-br from-blue-400 to-blue-500 px-3 py-1.5 font-dm text-sm font-medium text-white shadow-md shadow-green-400/50 transition-transform duration-200 ease-in-out hover:scale-[1.03]">
                                Connect Wallet
                            </button>
                        </Link> */}
                        <ConnectButton.Custom>
                            {({
                                account,
                                chain,
                                openAccountModal,
                                openChainModal,
                                openConnectModal,
                                authenticationStatus,
                                mounted,
                            }) => {
                                // Note: If your app doesn't use authentication, you
                                // can remove all 'authenticationStatus' checks
                                const ready =
                                    mounted &&
                                    authenticationStatus !== "loading";
                                const connected =
                                    ready &&
                                    account &&
                                    chain &&
                                    (!authenticationStatus ||
                                        authenticationStatus ===
                                            "authenticated");

                                return (
                                    <div
                                        {...(!ready && {
                                            "aria-hidden": true,
                                            style: {
                                                opacity: 0,
                                                pointerEvents: "none",
                                                userSelect: "none",
                                            },
                                        })}
                                    >
                                        {(() => {
                                            if (!connected) {
                                                return (
                                                    <button
                                                        onClick={
                                                            openConnectModal
                                                        }
                                                        type="button"
                                                        className="rounded-md bg-gradient-to-br from-blue-400 to-blue-500 px-3 py-1.5 font-dm text-sm font-medium text-white shadow-md shadow-green-400/50 transition-transform duration-200 ease-in-out hover:scale-[1.03]"
                                                    >
                                                        Connect Wallet
                                                    </button>
                                                );
                                            }

                                            if (chain.unsupported) {
                                                return (
                                                    <button
                                                        onClick={openChainModal}
                                                        type="button"
                                                    >
                                                        Wrong network
                                                    </button>
                                                );
                                            }

                                            return (
                                                <div
                                                    style={{
                                                        display: "flex",
                                                        gap: 12,
                                                    }}
                                                    className="rounded-md bg-gradient-to-br from-blue-400 to-blue-500 px-3 py-1.5 font-dm text-sm font-medium text-white shadow-md shadow-green-400/50 transition-transform duration-200 ease-in-out hover:scale-[1.03]"
                                                >
                                                    <button
                                                        onClick={openChainModal}
                                                        style={{
                                                            display: "flex",
                                                            alignItems:
                                                                "center",
                                                        }}
                                                        type="button"
                                                    >
                                                        {chain.hasIcon && (
                                                            <div
                                                                style={{
                                                                    background:
                                                                        chain.iconBackground,
                                                                    width: 12,
                                                                    height: 12,
                                                                    borderRadius: 999,
                                                                    overflow:
                                                                        "hidden",
                                                                    marginRight: 4,
                                                                }}
                                                            >
                                                                {chain.iconUrl && (
                                                                    <img
                                                                        alt={
                                                                            chain.name ??
                                                                            "Chain icon"
                                                                        }
                                                                        src={
                                                                            chain.iconUrl
                                                                        }
                                                                        style={{
                                                                            width: 12,
                                                                            height: 12,
                                                                        }}
                                                                    />
                                                                )}
                                                            </div>
                                                        )}
                                                        {chain.name}
                                                    </button>

                                                    <button
                                                        onClick={
                                                            openAccountModal
                                                        }
                                                        type="button"
                                                    >
                                                        {account.displayName}
                                                        {account.displayBalance
                                                            ? ` (${account.displayBalance})`
                                                            : ""}
                                                    </button>
                                                </div>
                                            );
                                        })()}
                                    </div>
                                );
                            }}
                        </ConnectButton.Custom>
                    </div>
                </nav>
            </header>

            import { publicClient } from "@/utils/client";
import {
    deleteFirebaseWallet,
    fetchFirebaseWallets,
    queryIn,
} from "@/utils/firebase";
import { foundationABI, kindlinkAbi } from "@/utils/ABI";
import { useEffect, useState } from "react";
import { getContract } from "viem";
import { foundationWithdrawalApprove } from "@/utils/smartContractInteraction";
import { ApprovalEnum } from "@/enum/enum";
import { toast } from "react-toastify";
import { extractErrorMessage } from "@/utils/utilsFunction";

const DevWithdrawalApproval = () => {
    const [approvalWallets, setApprovalWallets] = useState<any[]>([]);
    const [approvalInformations, setApprovalInformations] = useState<any[]>([]);
    const [approvals, setApprovals] = useState<any[]>([]);

    const handleWithdrawalApprove = async (
        foundationAddress: string,
        documentId: string
    ) => {
        let hash: string;
        const toastId = toast.loading("Writing Smart Contract");
        try {
            const approveWithdraw = await foundationWithdrawalApprove(
                foundationAddress
            );
            if (approveWithdraw) {
                hash = approveWithdraw;
                const deleteWithdrawal = await deleteFirebaseWallet(
                    ApprovalEnum.CollectionName,
                    documentId,
                    process.env.NEXT_PUBLIC_APPROVAL_DOCUMENTID as string,
                    ApprovalEnum.KeyName
                );
                if (deleteWithdrawal) {
                    toast.success(
                        ({ closeToast }) => (
                            <div className="custom-toast">
                                <a
                                    href={`https://sepolia.etherscan.io/address/${hash}`}
                                >
                                    {`https://sepolia.etherscan.io/address/${hash}`}
                                </a>
                            </div>
                        ),
                        {
                            autoClose: false,
                        }
                    );
                    toast.dismiss(toastId);
                }
            }
        } catch (error: any) {
            const errorMessage = error?.shortMessage;
            const extractedMessage = extractErrorMessage(errorMessage);
            toast.error(extractedMessage);
            toast.dismiss(toastId);
        }
    };

    useEffect(() => {
        const fetchApprovalWallets = async () => {
            try {
                const withdrawalData = await fetchFirebaseWallets(
                    ApprovalEnum.CollectionName,
                    process.env.NEXT_PUBLIC_APPROVAL_DOCUMENTID as string,
                    ApprovalEnum.KeyName
                );
                console.log("Withdrawal Data:", withdrawalData);
                setApprovalWallets(withdrawalData);
            } catch (error) {
                console.log(error);
            }
        };
        fetchApprovalWallets();
    }, []);

    useEffect(() => {
        const fetchApprovalInformation = async () => {
            try {
                if (approvalWallets.length > 0) {
                    const info: any[] = await queryIn(
                        ApprovalEnum.KeyName,
                        approvalWallets
                    );
                    console.log(
                        "Fetched Information inside fetchApprovalInformation:",
                        info
                    ); // Debug log
                    setApprovalInformations(info);
                    console.log(approvalInformations);
                } else {
                    console.log("Approval wallets are empty.");
                }
            } catch (error) {
                console.log("Error fetching approval information:", error);
            }
        };

        console.log("Approval Wallets inside useEffect:", approvalWallets); // Debug log
        fetchApprovalInformation();
    }, [approvalWallets]);

    useEffect(() => {
        const getContractBalance = async (contractAddress: string) => {
            try {
                const balance = await publicClient.getBalance({
                    address: contractAddress as `0x${string}`,
                });
                return `${Number(balance) / 1e18} ETH`;
            } catch (error) {
                console.log(error);
            }
        };

        const fetchContractState = async () => {
            try {
                const compiledData = [];
                console.log(
                    "Approval Informations inside useEffect:",
                    approvalInformations
                ); // Debug log
                for (const approval of approvalInformations) {
                    console.log("Approval Item:", approval);
                    const contract = getContract({
                        address: approval.contractAddress,
                        abi: foundationABI,
                        client: publicClient,
                    });

                    const approvalState: any =
                        await contract.read.getApprovalState();
                    const state = {
                        ...approval,
                        balance: await getContractBalance(
                            approval.contractAddress
                        ),
                        isRequestWithdrawal: approvalState.isRequestWithdrawal,
                        kindlinkApproval: approvalState.kindlinkApproval,
                        foundationOwnerApproval:
                            approvalState.foundationOwnerApproval,
                        foundationCoOwnerApproval:
                            approvalState.foundationCoOwnerApproval,
                    };
                    compiledData.push(state);
                }
                console.log("Compiled Data inside useEffect:", compiledData); // Debug log
                setApprovals(compiledData);
            } catch (error) {
                console.log(error);
            }
        };

        if (approvalInformations?.length !== 0) {
            console.log(
                "Approval Informations before fetchContractState:",
                approvalInformations
            ); // Debug log
            fetchContractState();
        }
    }, [approvalInformations]);

    useEffect(() => {
        const getContractBalance = async (contractAddress: string) => {
            try {
                const balance = await publicClient.getBalance({
                    address: contractAddress as `0x${string}`,
                });
                return `${Number(balance) / 1e18} ETH`;
            } catch (error) {
                console.log(error);
            }
        };

        const fetchContractState = async () => {
            try {
                const compiledData = [];
                console.log("Approval Informations: ", approvalInformations); // Debug log
                for (const approval of approvalInformations) {
                    console.log(approval);
                    const contract = getContract({
                        address: approval.contractAddress,
                        abi: foundationABI,
                        client: publicClient,
                    });

                    const approvalState: any =
                        await contract.read.getApprovalState();
                    const state = {
                        ...approval,
                        balance: await getContractBalance(
                            approval.contractAddress
                        ),
                        isRequestWithdrawal: approvalState.isRequestWithdrawal,
                        kindlinkApproval: approvalState.kindlinkApproval,
                        foundationOwnerApproval:
                            approvalState.foundationOwnerApproval,
                        foundationCoOwnerApproval:
                            approvalState.foundationCoOwnerApproval,
                    };
                    compiledData.push(state);
                }
                console.log("Compiled Data: ", compiledData); // Debug log
                setApprovals(compiledData);
            } catch (error) {
                console.log(error);
            }
        };

        if (approvalInformations?.length !== 0) {
            console.log("Approval Informations: ", approvalInformations); // Debug log
            fetchContractState();
        }
    }, [approvalInformations]);

    return (
        <>
            {approvals.length === 0 ? (
                <>
                    <div className="h-full w-full flex flex-col gap-5 justify-center items-center">
                        <img
                            src="https://cdn-icons-png.flaticon.com/512/7486/7486744.png"
                            alt="No Data"
                        />
                        <h1>No Withdrawal Request Currently Available</h1>
                    </div>
                </>
            ) : (
                <div className="relative overflow-y-auto w-full px-10">
                    <table className="w-full text-sm text-left rtl:text-right text-gray-500">
                        <thead className="text-xs text-gray-700 uppercase">
                            <tr>
                                <th scope="col" className="px-3 py-1.5">
                                    Project Name
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Contract Address
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Withdrawal Funds
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Kindlink Approval
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Owner Approval
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Co Owner Appro
                                </th>
                                <th scope="col" className="px-3 py-1.5">
                                    Status
                                </th>
                            </tr>
                        </thead>
                        {approvals &&
                            approvals.map((el: any, index: number) => {
                                return (
                                    <>
                                        <tbody key={index}>
                                            <tr className="border-b border-gray-400">
                                                <td
                                                    scope="row"
                                                    className="flex items-center px-3 py-2 text-gray-900 whitespace-nowrap"
                                                >
                                                    <img
                                                        className="w-10 h-10 rounded-full"
                                                        src={el?.imgUrl}
                                                        alt="Foundation Logo"
                                                    />
                                                    <div className="ps-3">
                                                        <div className="text-base font-semibold">
                                                            {el?.name}
                                                        </div>
                                                        <div className="font-normal text-gray-500">
                                                            Category
                                                        </div>
                                                    </div>
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.contractAddress}
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.balance}
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.kindlinkApproval ? (
                                                        <svg
                                                            viewBox="0 0 32 32"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <defs></defs>
                                                            <title />
                                                            <g
                                                                data-name="Layer 28"
                                                                id="Layer_28"
                                                            >
                                                                <path
                                                                    className="cls-1"
                                                                    d="M16,31A15,15,0,1,1,31,16,15,15,0,0,1,16,31ZM16,3A13,13,0,1,0,29,16,13,13,0,0,0,16,3Z"
                                                                />
                                                                <path
                                                                    className="cls-1"
                                                                    d="M13.67,22a1,1,0,0,1-.73-.32l-4.67-5a1,1,0,0,1,1.46-1.36l3.94,4.21,8.6-9.21a1,1,0,1,1,1.46,1.36l-9.33,10A1,1,0,0,1,13.67,22Z"
                                                                />
                                                            </g>
                                                        </svg>
                                                    ) : (
                                                        <svg
                                                            viewBox="0 0 512 512"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <title />
                                                            <g
                                                                data-name="1"
                                                                id="_1"
                                                                className="text-red-300"
                                                            >
                                                                <path d="M257,461.46c-114,0-206.73-92.74-206.73-206.73S143,48,257,48s206.73,92.74,206.73,206.73S371,461.46,257,461.46ZM257,78C159.55,78,80.27,157.28,80.27,254.73S159.55,431.46,257,431.46s176.73-79.28,176.73-176.73S354.45,78,257,78Z" />
                                                                <path d="M342.92,358a15,15,0,0,1-10.61-4.39L160.47,181.76a15,15,0,1,1,21.21-21.21L353.53,332.4A15,15,0,0,1,342.92,358Z" />
                                                                <path d="M171.07,358a15,15,0,0,1-10.6-25.6L332.31,160.55a15,15,0,0,1,21.22,21.21L181.68,353.61A15,15,0,0,1,171.07,358Z" />
                                                            </g>
                                                        </svg>
                                                    )}
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.foundationOwnerApproval ? (
                                                        <svg
                                                            viewBox="0 0 32 32"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <defs></defs>
                                                            <title />
                                                            <g
                                                                data-name="Layer 28"
                                                                id="Layer_28"
                                                            >
                                                                <path
                                                                    className="cls-1"
                                                                    d="M16,31A15,15,0,1,1,31,16,15,15,0,0,1,16,31ZM16,3A13,13,0,1,0,29,16,13,13,0,0,0,16,3Z"
                                                                />
                                                                <path
                                                                    className="cls-1"
                                                                    d="M13.67,22a1,1,0,0,1-.73-.32l-4.67-5a1,1,0,0,1,1.46-1.36l3.94,4.21,8.6-9.21a1,1,0,1,1,1.46,1.36l-9.33,10A1,1,0,0,1,13.67,22Z"
                                                                />
                                                            </g>
                                                        </svg>
                                                    ) : (
                                                        <svg
                                                            viewBox="0 0 512 512"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <title />
                                                            <g
                                                                data-name="1"
                                                                id="_1"
                                                                className="text-red-300"
                                                            >
                                                                <path d="M257,461.46c-114,0-206.73-92.74-206.73-206.73S143,48,257,48s206.73,92.74,206.73,206.73S371,461.46,257,461.46ZM257,78C159.55,78,80.27,157.28,80.27,254.73S159.55,431.46,257,431.46s176.73-79.28,176.73-176.73S354.45,78,257,78Z" />
                                                                <path d="M342.92,358a15,15,0,0,1-10.61-4.39L160.47,181.76a15,15,0,1,1,21.21-21.21L353.53,332.4A15,15,0,0,1,342.92,358Z" />
                                                                <path d="M171.07,358a15,15,0,0,1-10.6-25.6L332.31,160.55a15,15,0,0,1,21.22,21.21L181.68,353.61A15,15,0,0,1,171.07,358Z" />
                                                            </g>
                                                        </svg>
                                                    )}
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.foundationCoOwnerApproval ? (
                                                        <svg
                                                            viewBox="0 0 32 32"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <defs></defs>
                                                            <title />
                                                            <g
                                                                data-name="Layer 28"
                                                                id="Layer_28"
                                                            >
                                                                <path
                                                                    className="cls-1"
                                                                    d="M16,31A15,15,0,1,1,31,16,15,15,0,0,1,16,31ZM16,3A13,13,0,1,0,29,16,13,13,0,0,0,16,3Z"
                                                                />
                                                                <path
                                                                    className="cls-1"
                                                                    d="M13.67,22a1,1,0,0,1-.73-.32l-4.67-5a1,1,0,0,1,1.46-1.36l3.94,4.21,8.6-9.21a1,1,0,1,1,1.46,1.36l-9.33,10A1,1,0,0,1,13.67,22Z"
                                                                />
                                                            </g>
                                                        </svg>
                                                    ) : (
                                                        <svg
                                                            viewBox="0 0 512 512"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                            height="30px"
                                                            width="30px"
                                                        >
                                                            <title />
                                                            <g
                                                                data-name="1"
                                                                id="_1"
                                                                className="text-red-300"
                                                            >
                                                                <path d="M257,461.46c-114,0-206.73-92.74-206.73-206.73S143,48,257,48s206.73,92.74,206.73,206.73S371,461.46,257,461.46ZM257,78C159.55,78,80.27,157.28,80.27,254.73S159.55,431.46,257,431.46s176.73-79.28,176.73-176.73S354.45,78,257,78Z" />
                                                                <path d="M342.92,358a15,15,0,0,1-10.61-4.39L160.47,181.76a15,15,0,1,1,21.21-21.21L353.53,332.4A15,15,0,0,1,342.92,358Z" />
                                                                <path d="M171.07,358a15,15,0,0,1-10.6-25.6L332.31,160.55a15,15,0,0,1,21.22,21.21L181.68,353.61A15,15,0,0,1,171.07,358Z" />
                                                            </g>
                                                        </svg>
                                                    )}
                                                </td>
                                                <td className="px-3 py-2">
                                                    {el?.isRequestWithdrawal
                                                        ? "Ongoing Request"
                                                        : "No Ongoing Request"}
                                                </td>
                                                <td className="px-3 py-2 text-right">
                                                    <button
                                                        type="button"
                                                        onClick={() =>
                                                            handleWithdrawalApprove(
                                                                el?.contractAddress,
                                                                el?.id
                                                            )
                                                        }
                                                        className={`rounded-md bg-gradient-to-br from-blue-400 to-blue-500 px-3 py-1.5 font-dm text-xs font-medium text-white shadow-md shadow-green-400/50 transition-transform duration-200 ease-in-out hover:scale-[1.03]`}
                                                    >
                                                        Approve
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </>
                                );
                            })}
                    </table>
                </div>
            )}
        </>
    );
};

export default DevWithdrawalApproval;
